function createCircleTexture(e,t){const n=2*e,i=document.createElement("canvas");i.width=n,i.height=n;const r=i.getContext("2d");r.beginPath(),r.arc(e,e,e,0,2*Math.PI,!1),r.fillStyle=t,r.fill();const o=new THREE.Texture(i);return o.needsUpdate=!0,o}function setupParticleSystem(e,t){const n=300,i=300,r=new THREE.BufferGeometry,o=new Float32Array(27e4),a=new Float32Array(9e4),c=new Float32Array(9e4);for(let e=0;e<n;e++)for(let t=0;t<i;t++){let n=e*i+t;const r=2*(e-150),s=2*(t-150);o[3*n+0]=r,o[3*n+1]=s,o[3*n+2]=0,a[n]=1,c[n]=.5}r.setAttribute("position",new THREE.BufferAttribute(o,3)),r.setAttribute("scale",new THREE.BufferAttribute(a,1)),r.setAttribute("opacity",new THREE.BufferAttribute(c,1));const s=new THREE.ShaderMaterial({uniforms:{color:{value:new THREE.Color(16777215)},pointTexture:{value:t}},vertexShader:vertexShader(),fragmentShader:fragmentShader(),depthTest:!1,transparent:!0}),l=new THREE.Points(r,s);return e.add(l),l}function updateParticles(e,t,n,i){const r=e.geometry.attributes.position.array,o=e.geometry.attributes.scale.array,a=e.geometry.attributes.opacity.array;t.setFromCamera(n,i);const c=t.intersectObject(e),s=.005*Date.now();for(let e=0;e<r.length/3;e++){const t=3*e,n=r[t],i=r[t+1],l=10,d=.1*s+n*.07,u=30,v=.1*s+i*.01,m=7,w=.5*s+n*.01;r[t+2]=l*Math.sin(d)+u*Math.sin(v)+m*Math.cos(w);let g=1,y=.5;if(c.length>0){const e=Math.sqrt((n-c[0].point.x)**2+(i-c[0].point.y)**2);e<10&&(g=1+(10-e)/10*1.5,y=1-e/10*.5)}o[e]=g,a[e]=y}e.geometry.attributes.position.needsUpdate=!0,e.geometry.attributes.scale.needsUpdate=!0,e.geometry.attributes.opacity.needsUpdate=!0}function vertexShader(){return"\n        attribute float scale;\n        attribute float opacity;\n        varying vec2 vUv;\n        varying float vOpacity;\n        void main() {\n            vUv = uv;\n            vOpacity = opacity;\n            vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n            gl_PointSize = scale * (300.0 / -mvPosition.z);\n            gl_Position = projectionMatrix * mvPosition;\n        }\n    "}function fragmentShader(){return"\n        uniform vec3 color;\n        uniform sampler2D pointTexture;\n        varying vec2 vUv;\n        varying float vOpacity;\n        void main() {\n            gl_FragColor = vec4(color, vOpacity) * texture2D(pointTexture, gl_PointCoord);\n        }\n    "}gsap.registerPlugin(ScrollTrigger),document.addEventListener("DOMContentLoaded",(()=>{const e=new THREE.Scene,t=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);e.background=new THREE.Color(396808);const n=document.querySelector(".hero_webgl-element"),i=new THREE.WebGLRenderer({canvas:n});i.setSize(window.innerWidth,window.innerHeight),window.addEventListener("resize",(()=>{t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),i.setSize(window.innerWidth,window.innerHeight)}));const r=createCircleTexture(128,"#6BE688"),o=setupParticleSystem(e,r);t.position.z=120;const a=new THREE.Vector2,c=new THREE.Raycaster;document.addEventListener("mousemove",(e=>{a.x=e.clientX/window.innerWidth*2-1,a.y=-e.clientY/window.innerHeight*2+1}));"function"==typeof DeviceOrientationEvent.requestPermission?DeviceOrientationEvent.requestPermission().then((e=>{"granted"===e&&window.addEventListener("deviceorientation",(e=>{null!==e.gamma&&null!==e.beta&&(console.log("Device Orientation Event:",e),a.x=e.gamma/30,a.y=-e.beta/30)}))})).catch(console.error):window.addEventListener("deviceorientation",(e=>{null!==e.gamma&&null!==e.beta&&(console.log("Device Orientation Event:",e),a.x=e.gamma/30,a.y=-e.beta/30)}));var s=l();function l(){s=requestAnimationFrame(l),updateParticles(o,c,a,t),i.render(e,t)}ScrollTrigger.create({trigger:".section.is-collections-main",start:"bottom bottom",end:"bottom 80%",onLeave:()=>{s&&(cancelAnimationFrame(s),s=null),n.style.display="none"},onEnterBack:()=>{n.style.display="block",s||(s=l())}})}));

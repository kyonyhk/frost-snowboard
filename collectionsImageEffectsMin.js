class Sketch{constructor(e){this.scene=new THREE.Scene,this.vertex="\n        varying vec2 vUv;\n        void main() {\n          vUv = uv;\n          gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n        }\n      ",this.fragment=e.fragment,this.uniforms=e.uniforms,this.renderer=new THREE.WebGLRenderer,this.width=window.innerWidth,this.height=window.innerHeight,this.renderer.setPixelRatio(window.devicePixelRatio),this.renderer.setSize(this.width,this.height),this.renderer.setClearColor(15658734,1),this.duration=e.duration||1,this.debug=e.debug||!1,this.easing=e.easing||"easeInOut",this.clicker=document.getElementById("content"),this.container=document.getElementById("main-image-canvas"),this.images=JSON.parse(this.container.getAttribute("data-images")),this.marqueeImages=document.querySelectorAll(".cp_infinite-marquee-container img"),this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.container.appendChild(this.renderer.domElement),this.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.001,1e3),this.camera.position.set(0,0,2),this.time=0,this.current=0,this.textures=[],this.paused=!0,this.initiate((()=>{this.setupResize(),this.addObjects(),this.resize(),this.play(),this.setupInteractionEvents()}))}initiate(e){let t=this,i=[...this.images];this.marqueeImages.forEach((e=>{i.push(e.src)}));let s=0;this.textures=new Array(i.length);const n=()=>{s===i.length&&e()};i.length>0?i.forEach(((e,i)=>{(new THREE.TextureLoader).load(e,(e=>{t.textures[i]=e,s++,n()}),void 0,(t=>{console.error(`Error loading image at ${e}:`,t),s++,n()}))})):console.error("No images found to load.")}setupInteractionEvents(){let e=0;this.marqueeImages.forEach(((t,i)=>{let s=i%this.textures.length+1,n=this.textures[s];"ontouchstart"in window?t.addEventListener("click",(()=>{this.material.uniforms.texture2.value!==n&&(this.material.uniforms.texture2.value=n,gsap.to(this.material.uniforms.progress,{value:1,duration:1,ease:"power2.inOut",onComplete:()=>{this.material.uniforms.texture1.value=n,this.material.uniforms.progress.value=0}}))})):(t.addEventListener("mouseenter",(()=>{e=s,this.material.uniforms.texture2.value=n,gsap.to(this.material.uniforms.progress,{value:1,duration:1,ease:"power2.inOut",onComplete:()=>{this.material.uniforms.texture1.value=n,this.material.uniforms.progress.value=0}})})),t.addEventListener("mouseleave",(()=>{let t=this.textures[e];this.material.uniforms.texture2.value!==t&&(this.material.uniforms.texture2.value=t,gsap.to(this.material.uniforms.progress,{value:1,duration:1,ease:"power2.inOut",onComplete:()=>{this.material.uniforms.texture1.value=t,this.material.uniforms.progress.value=0}}))})))}))}applyTexture(e){let t=e+1,i=this.textures[t%this.textures.length];this.material.uniforms.texture2.value=i,gsap.to(this.material.uniforms.progress,{value:1,duration:1,ease:"power4.inOut"})}setupResize(){window.addEventListener("resize",this.resize.bind(this))}resize(){let e,t;this.width=this.container.offsetWidth,this.height=this.container.offsetHeight,this.renderer.setSize(this.width,this.height),this.camera.aspect=this.width/this.height,this.imageAspect=this.textures[0].image.height/this.textures[0].image.width,this.height/this.width>this.imageAspect?(e=this.width/this.height*this.imageAspect,t=1):(e=1,t=this.height/this.width/this.imageAspect),this.material.uniforms.resolution.value.x=this.width,this.material.uniforms.resolution.value.y=this.height,this.material.uniforms.resolution.value.z=e,this.material.uniforms.resolution.value.w=t;const i=this.camera.position.z;this.camera.fov=180/Math.PI*2*Math.atan(1/(2*i)),this.plane.scale.x=this.camera.aspect,this.plane.scale.y=1,this.camera.updateProjectionMatrix()}addObjects(){this.material=new THREE.ShaderMaterial({extensions:{derivatives:"#extension GL_OES_standard_derivatives : enable"},side:THREE.DoubleSide,uniforms:{time:{type:"f",value:0},progress:{type:"f",value:0},border:{type:"f",value:0},intensity:{type:"f",value:0},scaleX:{type:"f",value:40},scaleY:{type:"f",value:40},transition:{type:"f",value:40},swipe:{type:"f",value:0},width:{type:"f",value:0},radius:{type:"f",value:0},texture1:{type:"f",value:this.textures[0]},texture2:{type:"f",value:this.textures[1]},displacement:{type:"f",value:(new THREE.TextureLoader).load("https://uploads-ssl.webflow.com/65de4d4aa58a7df7f5ea205b/6694cc523ddbd2f97e5e4386_disp1.webp")},resolution:{type:"v4",value:new THREE.Vector4}},vertexShader:this.vertex,fragmentShader:this.fragment}),this.geometry=new THREE.PlaneGeometry(1,1,2,2),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane)}stop(){this.paused=!0}play(){this.paused=!1,this.render()}next(){if(this.isRunning)return;this.isRunning=!0;let e=this.textures.length,t=this.textures[(this.current+1)%e];this.material.uniforms.texture2.value=t,(new TimelineMax).to(this.material.uniforms.progress,this.duration,{value:1,ease:Power2[this.easing],onComplete:()=>{this.current=(this.current+1)%e,this.material.uniforms.texture1.value=t,this.material.uniforms.progress.value=0,this.isRunning=!1}})}render(){this.paused||(this.time+=.05,this.material.uniforms.time.value=this.time,Object.keys(this.uniforms).forEach((e=>{this.material.uniforms[e].value=.1})),requestAnimationFrame(this.render.bind(this)),this.renderer.render(this.scene,this.camera))}}document.addEventListener("DOMContentLoaded",(function(){const e=document.getElementById("main-image-canvas"),t=document.querySelector(".cp_main-image-container img");if(t&&e){const i=t.src;e.setAttribute("data-images",JSON.stringify([i]));const s="https://uploads-ssl.webflow.com/65de4d4aa58a7df7f5ea205b/6694cc523ddbd2f97e5e4386_disp1.webp";e.setAttribute("data-disp",s)}t&&(t.style.display="none");new Sketch({debug:!0,uniforms:{intensity:{value:.1,type:"f",min:0,max:3}},fragment:"\n      uniform float time;\n      uniform float progress;\n      uniform float intensity;\n      uniform float width;\n      uniform float scaleX;\n      uniform float scaleY;\n      uniform float transition;\n      uniform float radius;\n      uniform float swipe;\n      uniform sampler2D texture1;\n      uniform sampler2D texture2;\n      uniform sampler2D displacement;\n      uniform vec4 resolution;\n      varying vec2 vUv;\n      mat2 getRotM(float angle) {\n          float s = sin(angle);\n          float c = cos(angle);\n          return mat2(c, -s, s, c);\n      }\n      const float PI = 3.1415;\n      const float angle1 = PI *0.25;\n      const float angle2 = -PI *0.75;\n    \n    \n      void main()\t{\n        vec2 newUV = (vUv - vec2(0.5))*resolution.zw + vec2(0.5);\n    \n        vec4 disp = texture2D(displacement, newUV);\n        vec2 dispVec = vec2(disp.r, disp.g);\n    \n        vec2 distortedPosition1 = newUV + getRotM(angle1) * dispVec * intensity * progress;\n        vec4 t1 = texture2D(texture1, distortedPosition1);\n    \n        vec2 distortedPosition2 = newUV + getRotM(angle2) * dispVec * intensity * (1.0 - progress);\n        vec4 t2 = texture2D(texture2, distortedPosition2);\n    \n        gl_FragColor = mix(t1, t2, progress);\n    \n      }\n    "})}));

const PARTICLES_X=300,PARTICLES_Y=300,TOTAL_PARTICLES=9e4,TWO_PI=2*Math.PI;function createCircleTexture(e,t){const n=2*e,r=document.createElement("canvas");r.width=r.height=n;const i=r.getContext("2d");i.beginPath(),i.arc(e,e,e,0,TWO_PI,!1),i.fillStyle=t,i.fill();const o=new THREE.Texture(r);return o.needsUpdate=!0,o}function setupParticleSystem(e,t){const n=new THREE.BufferGeometry,r=new Float32Array(27e4),i=new Float32Array(9e4),o=new Float32Array(9e4);for(let e=0;e<300;e++)for(let t=0;t<300;t++){const n=300*e+t,a=2*(e-150),c=2*(t-150);r[3*n]=a,r[3*n+1]=c,r[3*n+2]=0,i[n]=1,o[n]=.5}n.setAttribute("position",new THREE.BufferAttribute(r,3)),n.setAttribute("scale",new THREE.BufferAttribute(i,1)),n.setAttribute("opacity",new THREE.BufferAttribute(o,1));const a=new THREE.ShaderMaterial({uniforms:{color:{value:new THREE.Color(16777215)},pointTexture:{value:t}},vertexShader:vertexShader(),fragmentShader:fragmentShader(),depthTest:!1,transparent:!0}),c=new THREE.Points(n,a);return e.add(c),c}function updateParticles(e,t,n,r){const i=e.geometry.attributes.position.array,o=e.geometry.attributes.scale.array,a=e.geometry.attributes.opacity.array;t.setFromCamera(n,r);const c=t.intersectObject(e),s=.005*Date.now();for(let e=0;e<9e4;e++){const t=3*e,n=i[t],r=i[t+1];i[t+2]=10*Math.sin(.1*s+.07*n)+30*Math.sin(.1*s+.01*r)+7*Math.cos(.5*s+.01*n);let l=1,d=.5;if(c.length>0){const e=Math.hypot(n-c[0].point.x,r-c[0].point.y);e<10&&(l=1+(10-e)/10*1.5,d=1-e/10*.5)}o[e]=l,a[e]=d}e.geometry.attributes.position.needsUpdate=!0,e.geometry.attributes.scale.needsUpdate=!0,e.geometry.attributes.opacity.needsUpdate=!0}function setupScrollTrigger(e,t,n){ScrollTrigger.create({trigger:".section.is-collections-main",start:"bottom bottom",end:"bottom 80%",onLeave:()=>{t&&(cancelAnimationFrame(t),t=null),e.style.display="none"},onEnterBack:()=>{e.style.display="block",t||(t=n())}})}function vertexShader(){return"\n    attribute float scale;\n    attribute float opacity;\n    varying vec2 vUv;\n    varying float vOpacity;\n    void main() {\n      vUv = uv;\n      vOpacity = opacity;\n      vec4 mvPosition = modelViewMatrix * vec4(position, 1.0);\n      gl_PointSize = scale * (300.0 / -mvPosition.z);\n      gl_Position = projectionMatrix * mvPosition;\n    }\n  "}function fragmentShader(){return"\n    uniform vec3 color;\n    uniform sampler2D pointTexture;\n    varying vec2 vUv;\n    varying float vOpacity;\n    void main() {\n      gl_FragColor = vec4(color, vOpacity) * texture2D(pointTexture, gl_PointCoord);\n    }\n  "}gsap.registerPlugin(ScrollTrigger),document.addEventListener("DOMContentLoaded",(()=>{const e=new THREE.Scene,t=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,1e3);e.background=new THREE.Color(396808);const n=document.querySelector(".hero_webgl-element"),r=new THREE.WebGLRenderer({canvas:n});r.setSize(window.innerWidth,window.innerHeight),window.addEventListener("resize",(()=>{t.aspect=window.innerWidth/window.innerHeight,t.updateProjectionMatrix(),r.setSize(window.innerWidth,window.innerHeight)}));const i=createCircleTexture(128,"#6BE688"),o=setupParticleSystem(e,i);t.position.z=120;const a=new THREE.Vector2,c=new THREE.Raycaster;document.addEventListener("mousemove",(e=>{a.x=e.clientX/window.innerWidth*2-1,a.y=-e.clientY/window.innerHeight*2+1}));let s=l();function l(){s=requestAnimationFrame(l),updateParticles(o,c,a,t),r.render(e,t)}setupScrollTrigger(n,s,l)}));

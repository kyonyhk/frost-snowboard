class Sketch{constructor(e){console.log("Sketch constructor started"),this.scene=new THREE.Scene,this.vertex="varying vec2 vUv; void main() { vUv = uv; gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0); }",this.fragment=e.fragment,this.uniforms={time:{type:"f",value:0},progress:{type:"f",value:0},intensity:e.uniforms.intensity,texture1:{type:"t",value:null},texture2:{type:"t",value:null},displacement:{type:"t",value:(new THREE.TextureLoader).load("https://uploads-ssl.webflow.com/65de4d4aa58a7df7f5ea205b/6694cc523ddbd2f97e5e4386_disp1.webp")},resolution:{type:"v4",value:new THREE.Vector4}},this.renderer=new THREE.WebGLRenderer({alpha:!0}),this.renderer.setClearColor(0,0),this.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,.001,1e3),this.camera.position.set(0,0,5),this.camera.lookAt(new THREE.Vector3(0,0,0)),this.renderer.setSize(window.innerWidth,window.innerHeight),this.renderer.domElement.style.position="relative",this.renderer.domElement.style.zIndex="1000",document.body.appendChild(this.renderer.domElement),this.initObjects(),this.updateResolution(),console.log("Sketch constructor completed")}initObjects(){console.log("sInitializing objects in scene"),this.material=new THREE.ShaderMaterial({vertexShader:this.vertex,fragmentShader:this.fragment,uniforms:this.uniforms}),this.geometry=new THREE.PlaneGeometry(2,2),this.plane=new THREE.Mesh(this.geometry,this.material),this.scene.add(this.plane),this.render()}render(){console.log("Rendering scene"),this.uniforms.texture1.value&&this.uniforms.texture2.value?(this.renderer.clear(),this.renderer.setClearColor(0,0),this.renderer.render(this.scene,this.camera)):console.log("Rendering skipped due to missing textures",this.uniforms.texture1.value,this.uniforms.texture2.value)}loadTexture(e,t){console.log("Loading texture:",e),(new THREE.TextureLoader).load(e,(r=>{r?(console.log("Texture loaded successfully:",e),t(r)):console.log("Failed to load texture:",e)}))}setTexture1(e){e?(console.log("Setting texture1",e),this.uniforms.texture1.value=e,console.log("Texture1 set successfully"),this.checkTexturesAndRender()):console.error("Texture1 is null")}setTexture2(e){e?(console.log("Setting texture2",e),this.uniforms.texture2.value=e,console.log("Texture2 set successfully"),this.checkTexturesAndRender()):console.error("Texture2 is null")}checkTexturesAndRender(){console.log("Checking textures",this.uniforms.texture1.value,this.uniforms.texture2.value),this.uniforms.texture1.value&&this.uniforms.texture2.value&&(console.log("Both textures set, attempting to render"),this.render())}startTransition(){console.log("Starting transition"),this.uniforms.progress.value=0,this.isAnimating=!0,this.animate()}updateResolution(){const e=this.renderer.domElement.clientWidth,t=this.renderer.domElement.clientHeight;this.uniforms.resolution.value.set(e,t,1/e,1/t),this.renderer.setSize(e,t),this.camera.aspect=e/t,this.camera.updateProjectionMatrix(),this.render()}animate(){this.isAnimating&&(this.uniforms.progress.value+=.01,this.uniforms.progress.value>=1&&(this.uniforms.progress.value=1,this.isAnimating=!1),requestAnimationFrame(this.animate.bind(this)),this.render())}}
